use pnet::packet::PrimitiveValues;
use pnet_macros_support::types::*;

use std::net::Ipv4Addr;

use serde::ser::{Serialize, SerializeStruct, Serializer};

const MS_NANO_SECS: u64 = 1_000_000u64;
const SECS_NANO_SECS: u64 = 1_000 * MS_NANO_SECS;

#[packet]
pub struct Netflow {
    version: u16be,
    count: u16be,
    pub sys_uptime: u32be,
    pub unix_secs: u32be,
    pub unix_nsecs: u32be,
    flow_sequence: u32be,
    engine_type: u8,
    engine_id: u8,
    sampling_interval: u16be,
    #[length_fn = "netflow_records_length"]
    pub records: Vec<Record>,

    #[payload]
    payload: Vec<u8>
}

impl Netflow {
    pub fn boottime(&self) -> u64 {
        self.unix_secs as u64 * SECS_NANO_SECS + self.unix_nsecs as u64 - self.sys_uptime as u64 * MS_NANO_SECS
    }
}

fn netflow_records_length(p: &NetflowPacket) -> usize {
    p.get_count() as usize * 48
}

impl Serialize for Netflow {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        where S: Serializer
    {
        let mut struc = serializer.serialize_struct("Netflow", 10)?;
        struc.serialize_field("version", &self.version)?;
        struc.serialize_field("count", &self.count)?;
        struc.serialize_field("sys_uptime", &self.sys_uptime)?;
        struc.serialize_field("unix_secs", &self.unix_secs)?;
        struc.serialize_field("unix_nsecs", &self.unix_nsecs)?;
        struc.serialize_field("flow_sequence", &self.flow_sequence)?;
        struc.serialize_field("engine_type", &self.engine_type)?;
        struc.serialize_field("engine_id", &self.engine_id)?;
        struc.serialize_field("sampling_interval", &self.sampling_interval)?;
        struc.serialize_field("records", &self.records)?;
        struc.end()
    }
}

#[packet]
pub struct Record {
    #[construct_with(u8, u8, u8, u8)]
    pub source: Ipv4Addr,
    #[construct_with(u8, u8, u8, u8)]
    pub destination: Ipv4Addr,
    #[construct_with(u8, u8, u8, u8)]
    pub next_hop: Ipv4Addr,
    pub input: u16be,
    pub output: u16be,
    pub d_pkts: u32be,
    pub d_octets: u32be,
    pub first: u32be,
    pub last: u32be,
    pub src_port: u16be,
    pub dst_port: u16be,
    // is there a better way to handle padding?
    pad1: u8,
    pub tcp_flags: u8,
    pub prot: u8,
    pub tos: u8,
    pub src_as: u16be,
    pub dst_as: u16be,
    pub src_mask: u8,
    pub dst_mask: u8,
    pad2: u16be,
    // is there a better way to do this?
    #[payload]
    #[length_fn = "record_payload_length"]
    payload: Vec<u8>
}

fn record_payload_length(_: &RecordPacket) -> usize {
    0usize
}

impl Serialize for Record {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        where S: Serializer
    {
        let mut struc = serializer.serialize_struct("Record", 18)?;
        struc.serialize_field("source", &self.source)?;
        struc.serialize_field("destination", &self.destination)?;
        struc.serialize_field("next_hop", &self.next_hop)?;
        struc.serialize_field("input", &self.input)?;
        struc.serialize_field("output", &self.output)?;
        struc.serialize_field("d_pkts", &self.d_pkts)?;
        struc.serialize_field("d_octets", &self.d_octets)?;
        // TODO resolved time
        struc.serialize_field("first", &self.first)?;
        struc.serialize_field("last", &self.last)?;
        struc.serialize_field("src_port", &self.src_port)?;
        struc.serialize_field("dst_port", &self.dst_port)?;
        struc.serialize_field("tcp_flags", &self.tcp_flags)?;
        struc.serialize_field("prot", &self.prot)?;
        struc.serialize_field("tos", &self.tos)?;
        struc.serialize_field("src_as", &self.src_as)?;
        struc.serialize_field("dst_as", &self.dst_as)?;
        struc.serialize_field("src_mask", &self.src_mask)?;
        struc.serialize_field("dst_mask", &self.dst_mask)?;
        struc.end()
    }
}

#[test]
fn netflow_packet_test() {
    let mut packet = [0u8; 24];
    {
        let mut netflow = MutableNetflowPacket::new(&mut packet[..]).unwrap();
        netflow.set_version(5);
        assert_eq!(netflow.get_version(), 5);

        netflow.set_count(1);
        assert_eq!(netflow.get_count(), 1);

        netflow.set_sys_uptime(1228600932);
        assert_eq!(netflow.get_sys_uptime(), 1228600932);

        netflow.set_unix_secs(1185457716);
        assert_eq!(netflow.get_unix_secs(), 1185457716);

        netflow.set_unix_nsecs(855073578);
        assert_eq!(netflow.get_unix_nsecs(), 855073578);

        netflow.set_flow_sequence(2922592624);
        assert_eq!(netflow.get_flow_sequence(), 2922592624);

        netflow.set_engine_type(0);
        assert_eq!(netflow.get_engine_type(), 0);

        netflow.set_engine_id(5);
        assert_eq!(netflow.get_engine_id(), 5);

        netflow.set_sampling_interval(0);
        assert_eq!(netflow.get_sampling_interval(), 0);

    }
}

#[test]
fn record_packet_test() {
    let mut packet = [0u8; 48];
    {
        let mut record = MutableRecordPacket::new(&mut packet[..]).unwrap();
        record.set_source(Ipv4Addr::new(122, 166, 69, 123));
        assert_eq!(record.get_source(), Ipv4Addr::new(122, 166, 69, 123));

        record.set_destination(Ipv4Addr::new(21, 185, 87, 11));
        assert_eq!(record.get_destination(), Ipv4Addr::new(21, 185, 87, 11));

        record.set_next_hop(Ipv4Addr::new(99, 145, 4, 143));
        assert_eq!(record.get_next_hop(), Ipv4Addr::new(99, 145, 4, 143));

        record.set_input(108);
        assert_eq!(record.get_input(), 108);

        record.set_output(120);
        assert_eq!(record.get_output(), 120);

        record.set_d_pkts(5);
        assert_eq!(record.get_d_pkts(), 5);

        record.set_d_octets(809);
        assert_eq!(record.get_d_octets(), 809);

        record.set_first(1228600535);
        assert_eq!(record.get_first(), 1228600535);

        record.set_last(1228600535);
        assert_eq!(record.get_last(), 1228600535);

        record.set_src_port(64593);
        assert_eq!(record.get_src_port(), 64593);

        record.set_dst_port(80);
        assert_eq!(record.get_dst_port(), 80);

        record.set_tcp_flags(0x00);
        assert_eq!(record.get_tcp_flags(), 0x00);

        record.set_prot(6);
        assert_eq!(record.get_prot(), 6);

        record.set_tos(0x00);
        assert_eq!(record.get_tos(), 0x00);

        record.set_src_as(0);
        assert_eq!(record.get_src_as(), 0);

        record.set_dst_as(0);
        assert_eq!(record.get_dst_as(), 0);

        record.set_src_mask(19);
        assert_eq!(record.get_src_mask(), 19);

        record.set_dst_mask(0);
        assert_eq!(record.get_dst_mask(), 0);
    }
}
